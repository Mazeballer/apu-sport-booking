// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===========================
   Enums
   =========================== */
enum Role {
  student
  staff
  admin
}

enum BookingStatus {
  confirmed
  cancelled
  rescheduled
}

enum EquipReqStatus {
  pending
  approved
  denied
  issued
  returned
}

/* ===========================
   Core
   =========================== */
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  role      Role     @default(student)
  createdAt DateTime @default(now())

  bookings   Booking[]
  decisions  EquipmentRequest[] @relation("Decider")
  pushSubs   PushSubscription[]
}

model Facility {
  id        String   @id @default(uuid())
  name      String
  type      String             // e.g., "Indoor Hall", "Outdoor Court"
  location  String
  rules     String?
  photos    String[]           // Supabase Storage paths
  active    Boolean  @default(true)  // <- use this toggle to hide/show in UI
  createdAt DateTime @default(now())

  schedules FacilitySchedule[]
  courts    Court[]
  bookings  Booking[]          // <- keeps the opposite relation for Booking
  equipment Equipment[]        // <- keeps the opposite relation for Equipment
}

model FacilitySchedule {
  id         String   @id @default(uuid())
  facilityId String
  dayOfWeek  Int      // 0..6 (Sun..Sat)
  openTime   String   // "08:00"
  closeTime  String   // "22:00"

  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@index([facilityId, dayOfWeek])
}

/* ===========================
   Spaces (Courts) & Sports
   =========================== */
model Court {
  id               String   @id @default(uuid())
  facilityId       String
  name             String   // e.g., "Court 1", "Hall A"
  conflictGroupId  String?  // same value across sub-spaces that share floor (optional)
  active           Boolean  @default(true) // <- optional per-court toggle

  facility         Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  supportedSports  CourtSport[]
  bookings         Booking[]

  @@unique([facilityId, name]) // unique court name per facility
  @@index([facilityId])
  @@index([conflictGroupId])
  @@index([active])
}

model Sport {
  id                  String   @id @default(uuid())
  name                String   @unique   // e.g., "Futsal", "Volleyball", "Badminton"
  minDurationMinutes  Int      @default(60)
  maxDurationMinutes  Int      @default(120)
  createdAt           DateTime @default(now())

  courts   CourtSport[]
  bookings Booking[]
}

// Junction: a court supports many sports
model CourtSport {
  courtId String
  sportId String

  court   Court @relation(fields: [courtId], references: [id], onDelete: Cascade)
  sport   Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@id([courtId, sportId])
}

/* ===========================
   Bookings
   =========================== */
model Booking {
  id         String        @id @default(uuid())
  userId     String
  facilityId String
  courtId    String
  sportId    String
  start      DateTime      @db.Timestamptz(6)
  end        DateTime      @db.Timestamptz(6)
  status     BookingStatus @default(confirmed)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  court      Court    @relation(fields: [courtId], references: [id], onDelete: Cascade)
  sport      Sport    @relation(fields: [sportId], references: [id], onDelete: Restrict)

  equipmentRequests EquipmentRequest[]

  @@index([facilityId, start])
  @@index([courtId, start])
  @@index([userId, start])
  @@unique([courtId, start, end]) // same exact slot on same court
}

/* ===========================
   Equipment & Requests
   =========================== */
model Equipment {
  id           String   @id @default(uuid())
  facilityId   String
  name         String
  qtyTotal     Int
  qtyAvailable Int     // Keep in sync on issue/return in your API
  notes        String?

  facility     Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  requestItems EquipmentRequestItem[]

  @@index([facilityId, name])
}

model EquipmentRequest {
  id         String         @id @default(uuid())
  bookingId  String
  status     EquipReqStatus @default(pending)
  decidedBy  String?
  decidedAt  DateTime?
  note       String?
  createdAt  DateTime       @default(now())

  booking    Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  items      EquipmentRequestItem[]

  decider    User?          @relation("Decider", fields: [decidedBy], references: [id])
  @@index([status, createdAt])
}

model EquipmentRequestItem {
  id          String   @id @default(uuid())
  requestId   String
  equipmentId String
  qty         Int

  request     EquipmentRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  equipment   Equipment        @relation(fields: [equipmentId], references: [id], onDelete: Restrict)

  @@unique([requestId, equipmentId])
}

/* ===========================
   PWA Push Subscriptions
   =========================== */
model PushSubscription {
  id        String   @id @default(uuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
